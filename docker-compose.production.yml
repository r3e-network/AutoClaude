version: '3.8'

services:
  # MultiVM nodes with production configuration
  multivm-node1:
    container_name: multivm-node1-prod
    image: multivm:latest
    environment:
      - NODE_ID=1
      - NODE_NAME=multivm-node1-prod
      - MULTIVM_PORT=8080
      - RETH_PORT=8545
      - SOLANA_PORT=8899
      - P2P_PORT=30303
      - ENGINE_API_PORT=8551
      - PRODUCTION_MODE=true
      - ENABLE_TLS=true
      - ENABLE_MONITORING=true
    volumes:
      - ./docker-entrypoint-production.sh:/docker-entrypoint.sh:ro
      - ./configs/production/node1:/opt/multivm/config
      - multivm-data-node1-prod:/opt/multivm/data
      - multivm-logs-node1:/var/log/multivm
    ports:
      - "8080:8080"   # MultiVM API
      - "8545:8545"   # Reth RPC
      - "8546:8546"   # Reth WebSocket
      - "8899:8899"   # Solana RPC
      - "30303:30303" # P2P
      - "9000:9000"   # Prometheus metrics
    networks:
      - multivm-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  multivm-node2:
    container_name: multivm-node2-prod
    image: multivm:latest
    environment:
      - NODE_ID=2
      - NODE_NAME=multivm-node2-prod
      - MULTIVM_PORT=8080
      - RETH_PORT=8545
      - SOLANA_PORT=8899
      - P2P_PORT=30303
      - ENGINE_API_PORT=8551
      - PRODUCTION_MODE=true
      - ENABLE_TLS=true
      - ENABLE_MONITORING=true
    volumes:
      - ./docker-entrypoint-production.sh:/docker-entrypoint.sh:ro
      - ./configs/production/node2:/opt/multivm/config
      - multivm-data-node2-prod:/opt/multivm/data
      - multivm-logs-node2:/var/log/multivm
    ports:
      - "8081:8080"
      - "8547:8545"
      - "8548:8546"
      - "8900:8899"
      - "30304:30303"
      - "9001:9000"
    networks:
      - multivm-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  multivm-node3:
    container_name: multivm-node3-prod
    image: multivm:latest
    environment:
      - NODE_ID=3
      - NODE_NAME=multivm-node3-prod
      - MULTIVM_PORT=8080
      - RETH_PORT=8545
      - SOLANA_PORT=8899
      - P2P_PORT=30303
      - ENGINE_API_PORT=8551
      - PRODUCTION_MODE=true
      - ENABLE_TLS=true
      - ENABLE_MONITORING=true
    volumes:
      - ./docker-entrypoint-production.sh:/docker-entrypoint.sh:ro
      - ./configs/production/node3:/opt/multivm/config
      - multivm-data-node3-prod:/opt/multivm/data
      - multivm-logs-node3:/var/log/multivm
    ports:
      - "8082:8080"
      - "8549:8545"
      - "8550:8546"
      - "8901:8899"
      - "30305:30303"
      - "9002:9000"
    networks:
      - multivm-prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # Load Balancer
  nginx:
    container_name: multivm-loadbalancer
    image: nginx:alpine
    volumes:
      - ./configs/production/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/production/ssl:/etc/nginx/ssl:ro
    ports:
      - "443:443"     # HTTPS
      - "80:80"       # HTTP (redirect to HTTPS)
      - "8443:8443"   # Secure RPC
    networks:
      - multivm-prod
    depends_on:
      - multivm-node1
      - multivm-node2
      - multivm-node3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Monitoring Stack
  prometheus:
    container_name: multivm-prometheus
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/production/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - multivm-prod
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  grafana:
    container_name: multivm-grafana
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - ./configs/production/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/production/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - multivm-prod
    depends_on:
      - prometheus
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Log Aggregation
  loki:
    container_name: multivm-loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./configs/production/loki.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks:
      - multivm-prod
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Alert Manager
  alertmanager:
    container_name: multivm-alertmanager
    image: prom/alertmanager:latest
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./configs/production/alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager-data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - multivm-prod
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Explorer (Production)
  explorer:
    container_name: multivm-explorer-prod
    build:
      context: ./multivm-explorer
      dockerfile: Dockerfile.production
    environment:
      - NODE_ENV=production
      - API_ENDPOINTS=http://nginx/api/v1
      - ENABLE_SSL=true
    ports:
      - "3000:3000"
    networks:
      - multivm-prod
    depends_on:
      - nginx
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Rate Limiter / DDoS Protection
  cloudflare-tunnel:
    container_name: multivm-cloudflare
    image: cloudflare/cloudflared:latest
    command: tunnel --no-autoupdate run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - multivm-prod
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

networks:
  multivm-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

volumes:
  # Data volumes for each node
  multivm-data-node1-prod:
  multivm-data-node2-prod:
  multivm-data-node3-prod:
  
  # Log volumes
  multivm-logs-node1:
  multivm-logs-node2:
  multivm-logs-node3:
  
  # Monitoring data
  prometheus-data:
  grafana-data:
  loki-data:
  alertmanager-data: