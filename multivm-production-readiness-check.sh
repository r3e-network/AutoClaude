#!/bin/bash

# MultiVM Blockchain Production Readiness Check
# This script checks the production readiness of the MultiVM blockchain running in Docker

echo "=================================================="
echo "ðŸš€ MultiVM Blockchain Production Readiness Check"
echo "=================================================="
echo ""

# Color codes
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Counters
PASSED=0
FAILED=0
WARNINGS=0

# Check function
check() {
    local name=$1
    local condition=$2
    local pass_msg=$3
    local fail_msg=$4
    
    echo -n "Checking $name... "
    if eval "$condition"; then
        echo -e "${GREEN}âœ“ $pass_msg${NC}"
        ((PASSED++))
        return 0
    else
        echo -e "${RED}âœ— $fail_msg${NC}"
        ((FAILED++))
        return 1
    fi
}

# Warning function
warn() {
    echo -e "${YELLOW}âš  WARNING: $1${NC}"
    ((WARNINGS++))
}

echo -e "${BLUE}1. Infrastructure Checks${NC}"
echo "========================="

# Check Docker containers
check "Docker Containers" \
    "[ $(docker ps | grep -c multivm) -eq 9 ]" \
    "All 9 containers running" \
    "Expected 9 containers, found $(docker ps | grep -c multivm)"

# Check node health
check "Node Health" \
    "[ $(docker ps | grep multivm-node | grep -c healthy) -eq 7 ]" \
    "All 7 nodes healthy" \
    "Some nodes are unhealthy"

# Check essential services
check "Explorer Service" \
    "curl -s -o /dev/null -w '%{http_code}' http://localhost:3000 | grep -q 200" \
    "Explorer accessible on port 3000" \
    "Explorer not accessible"

check "Reth RPC" \
    "curl -s -X POST http://localhost:8545 -H 'Content-Type: application/json' -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_blockNumber\",\"params\":[],\"id\":1}' | grep -q result" \
    "Reth RPC responding on port 8545" \
    "Reth RPC not responding"

check "MultiVM API" \
    "curl -s -o /dev/null -w '%{http_code}' http://localhost:8080/api/v1/status | grep -q 200" \
    "MultiVM API accessible on port 8080" \
    "MultiVM API not accessible"

echo ""
echo -e "${BLUE}2. Blockchain Functionality${NC}"
echo "============================"

# Check blockchain activity
LATEST_BLOCK=$(curl -s "http://localhost:3000/api/blocks?node=1&limit=1" 2>/dev/null | jq -r '.[0].number' 2>/dev/null || echo "0")
check "Blockchain Progress" \
    "[ $LATEST_BLOCK -gt 0 ]" \
    "Blockchain producing blocks (latest: #$LATEST_BLOCK)" \
    "No blocks being produced"

# Check transaction processing
TX_COUNT=$(curl -s "http://localhost:3000/api/blocks?node=1&limit=10" 2>/dev/null | jq '[.[] | .transactionCount] | add' 2>/dev/null || echo "0")
check "Transaction Processing" \
    "[ $TX_COUNT -gt 0 ]" \
    "Transactions being processed (last 10 blocks: $TX_COUNT txs)" \
    "No transactions in recent blocks"

# Check transaction types
if [ $TX_COUNT -gt 0 ]; then
    TX_TYPES=$(curl -s "http://localhost:3000/api/blocks?node=1&limit=10" 2>/dev/null | jq -r '[.[] | .transactionTypes] | add | "EVM:\(.evm) SVM:\(.svm) MultiVM:\(.multivm)"' 2>/dev/null || echo "N/A")
    echo "  Transaction distribution: $TX_TYPES"
fi

echo ""
echo -e "${BLUE}3. Token System${NC}"
echo "================"

# Check Ari token implementation
check "Ari Token Display" \
    "docker logs multivm-mixed-tx-generator 2>&1 | tail -20 | grep -q ARI" \
    "Transaction generator using ARI token" \
    "ARI token not found in transaction logs"

check "Explorer Token Display" \
    "curl -s http://localhost:3000 2>/dev/null | grep -q \"symbol: 'ARI'\"" \
    "Explorer configured for ARI token" \
    "Explorer not showing ARI token"

echo ""
echo -e "${BLUE}4. Performance Metrics${NC}"
echo "======================"

# Calculate transaction rate
if [ $TX_COUNT -gt 0 ]; then
    # Assuming ~5 second blocks, 10 blocks = 50 seconds
    TX_RATE=$(echo "scale=2; $TX_COUNT / 50" | bc 2>/dev/null || echo "0")
    check "Transaction Rate" \
        "[ $(echo \"$TX_RATE > 10\" | bc) -eq 1 ]" \
        "Good transaction rate: ~$TX_RATE tx/sec" \
        "Low transaction rate: ~$TX_RATE tx/sec"
else
    warn "Cannot calculate transaction rate - no recent transactions"
fi

echo ""
echo -e "${BLUE}5. Security Considerations${NC}"
echo "=========================="

# Check for development mode
DEV_MODE=$(docker exec multivm-node1 ps aux | grep -c "\-\-dev" || echo "0")
if [ $DEV_MODE -gt 0 ]; then
    warn "Reth running in development mode (--dev flag detected)"
else
    echo -e "${GREEN}âœ“ Reth not in development mode${NC}"
    ((PASSED++))
fi

# Check consensus architecture
if [ $DEV_MODE -gt 0 ]; then
    warn "Blocks generated by Reth dev mode instead of MultiVM consensus"
fi

echo ""
echo -e "${BLUE}6. High Availability${NC}"
echo "===================="

# Check node distribution
check "Multi-Node Setup" \
    "[ $(docker ps | grep -c multivm-node) -eq 7 ]" \
    "7-node cluster active" \
    "Incorrect number of nodes"

# Check consensus requirements
check "BFT Consensus Capability" \
    "[ $(docker ps | grep -c multivm-node) -ge 4 ]" \
    "Sufficient nodes for BFT consensus (need 2/3+1)" \
    "Insufficient nodes for BFT consensus"

echo ""
echo -e "${BLUE}7. Monitoring & Observability${NC}"
echo "============================="

check "Explorer Monitoring" \
    "curl -s http://localhost:3000/api/status 2>/dev/null | jq -r '.healthyNodes' | grep -q '^[0-9]'" \
    "Explorer providing health metrics" \
    "Explorer health metrics not available"

# Check for logs
check "Container Logs" \
    "docker logs multivm-node1 2>&1 | tail -10 | wc -l | grep -q 10" \
    "Logs accessible for debugging" \
    "Cannot access container logs"

echo ""
echo -e "${BLUE}8. Data Persistence${NC}"
echo "===================="

# Check for Docker volumes
VOLUMES=$(docker volume ls | grep -c multivm || echo "0")
if [ $VOLUMES -gt 0 ]; then
    echo -e "${GREEN}âœ“ Docker volumes configured: $VOLUMES volumes${NC}"
    ((PASSED++))
else
    warn "No persistent volumes configured - data will be lost on container restart"
fi

echo ""
echo "=================================================="
echo -e "${BLUE}PRODUCTION READINESS SUMMARY${NC}"
echo "=================================================="
echo ""

TOTAL=$((PASSED + FAILED))
SCORE=$((PASSED * 100 / TOTAL))

echo "Total Checks: $TOTAL"
echo -e "Passed: ${GREEN}$PASSED${NC}"
echo -e "Failed: ${RED}$FAILED${NC}"
echo -e "Warnings: ${YELLOW}$WARNINGS${NC}"
echo "Score: $SCORE%"
echo ""

# Production readiness assessment
echo -e "${BLUE}Production Readiness Assessment:${NC}"
if [ $SCORE -ge 80 ] && [ $WARNINGS -le 2 ]; then
    echo -e "${GREEN}âœ“ READY FOR PRODUCTION${NC} (with minor adjustments)"
elif [ $SCORE -ge 60 ]; then
    echo -e "${YELLOW}âš  NEARLY PRODUCTION READY${NC}"
    echo "  - Address failed checks and warnings"
    echo "  - Particular attention to consensus architecture"
else
    echo -e "${RED}âœ— NOT PRODUCTION READY${NC}"
    echo "  - Significant improvements needed"
    echo "  - Current setup suitable for development/testing only"
fi

echo ""
echo -e "${BLUE}Key Production Requirements:${NC}"
echo "1. Remove Reth --dev mode and implement proper consensus"
echo "2. Configure persistent storage for production data"
echo "3. Implement comprehensive monitoring (Prometheus/Grafana)"
echo "4. Add security measures (TLS, authentication, firewalls)"
echo "5. Set up backup and disaster recovery procedures"
echo "6. Implement rate limiting and DDoS protection"
echo "7. Configure log aggregation and analysis"
echo "8. Set up alerting for critical events"

echo ""
echo -e "${BLUE}Current Status:${NC}"
echo -e "${GREEN}âœ“ Excellent for development and testing${NC}"
echo -e "${YELLOW}âš  Requires modifications for production deployment${NC}"

# Exit with appropriate code
if [ $SCORE -ge 60 ]; then
    exit 0
else
    exit 1
fi