id: rust-checks
name: Rust Programming Quality Checks
description: Enforces Rust code quality standards by running format, clippy, build, and test checks before task completion
version: 1.0.0
author: AutoClaude Development Team
capabilities:
  - Rust code formatting with cargo fmt
  - Linting with cargo clippy
  - Build validation with cargo build
  - Test execution with cargo test
  - Documentation generation with cargo doc
  - Security audit with cargo audit
  - Dependency management
projectDetection:
  - pattern: "**/Cargo.toml"
  - pattern: "**/Cargo.lock"
  - pattern: "**/*.rs"
  - files: ["rust-toolchain", "rust-toolchain.toml"]
  - keywords: ["rust", "cargo", "rustc"]
priority: critical
enabled: true
supportsTriggers: true
supportsAnalysis: true
supportsFix: true
smartMode: true
options:
  enforceFormatting: true
  runClippy: true
  runTests: true
  checkDocumentation: true
  runSecurityAudit: true
  denyWarnings: false
  checkExamples: true

check:
  script: |
    #!/bin/bash
    echo "ü¶Ä Rust Programming Quality Checks - Ensuring production-ready code"
    
    ERRORS=()
    WARNINGS=()
    CHECK_FAILED=false
    
    # Find Cargo.toml files
    CARGO_FILES=$(find . -name "Cargo.toml" -type f 2>/dev/null | grep -v "/target/" | grep -v "/.cargo/" | head -10)
    
    if [ -z "$CARGO_FILES" ]; then
      echo "‚ùå No Rust Cargo.toml files found"
      exit 1
    fi
    
    echo "‚úÖ Rust project detected"
    
    # Check if cargo is installed
    if ! command -v cargo &> /dev/null; then
      echo "‚ùå Cargo is not installed. Please install Rust toolchain."
      exit 1
    fi
    
    # Function to run cargo command and capture result
    run_cargo_command() {
      local cmd="$1"
      local description="$2"
      local extra_args="$3"
      
      echo "üîÑ Running: cargo $cmd $extra_args"
      
      output=$(cargo $cmd $extra_args 2>&1)
      exit_code=$?
      
      if [ $exit_code -ne 0 ]; then
        ERRORS+=("$description failed: cargo $cmd")
        CHECK_FAILED=true
        echo "‚ùå $description failed"
        echo "$output" | tail -20
        return 1
      else
        echo "‚úÖ $description passed"
        return 0
      fi
    }
    
    # Get workspace root or use current directory
    WORKSPACE_ROOT=$(cargo metadata --no-deps --format-version 1 2>/dev/null | grep -oP '"workspace_root":"\K[^"]+' || pwd)
    cd "$WORKSPACE_ROOT" || exit 1
    
    # Step 1: Check formatting
    echo -e "\nüé® Checking code formatting..."
    
    output=$(cargo fmt -- --check 2>&1)
    exit_code=$?
    
    if [ $exit_code -ne 0 ]; then
      ERRORS+=("Code formatting issues found. Run 'cargo fmt' to fix.")
      CHECK_FAILED=true
      echo "‚ùå Format check failed"
      
      # Show which files need formatting
      unformatted=$(cargo fmt -- --check 2>&1 | grep "Diff in" | cut -d' ' -f3 | head -10)
      if [ -n "$unformatted" ]; then
        echo "Files needing formatting:"
        echo "$unformatted"
      fi
    else
      echo "‚úÖ Format check passed"
    fi
    
    # Step 2: Run clippy
    echo -e "\nüìé Running clippy linter..."
    
    # Check if clippy is installed
    if ! cargo clippy --version &> /dev/null; then
      echo "Installing clippy..."
      rustup component add clippy 2>/dev/null || {
        WARNINGS+=("Clippy not available. Install with: rustup component add clippy")
        echo "‚ö†Ô∏è Skipping clippy check"
      }
    fi
    
    if cargo clippy --version &> /dev/null; then
      output=$(cargo clippy --all-targets --all-features -- -W clippy::all 2>&1)
      exit_code=$?
      
      # Check for clippy warnings
      if echo "$output" | grep -q "warning:"; then
        warning_count=$(echo "$output" | grep -c "warning:")
        WARNINGS+=("Clippy found $warning_count warnings")
        echo "‚ö†Ô∏è Clippy found $warning_count warnings"
      fi
      
      # Check for clippy errors
      if echo "$output" | grep -q "error:"; then
        error_count=$(echo "$output" | grep -c "error:")
        ERRORS+=("Clippy found $error_count errors")
        CHECK_FAILED=true
        echo "‚ùå Clippy found $error_count errors"
        echo "$output" | grep -A2 "error:" | head -20
      elif [ $exit_code -eq 0 ]; then
        echo "‚úÖ Clippy check passed"
      fi
    fi
    
    # Step 3: Build project
    echo -e "\nüî® Building project..."
    
    # Clean build to ensure fresh state
    cargo clean 2>/dev/null
    
    # Build in release mode
    output=$(cargo build --release 2>&1)
    exit_code=$?
    
    if [ $exit_code -ne 0 ]; then
      ERRORS+=("Build failed")
      CHECK_FAILED=true
      echo "‚ùå Build failed"
      echo "$output" | grep -E "(error|failed)" | head -20
    else
      echo "‚úÖ Build succeeded"
      
      # Also check debug build
      echo "Checking debug build..."
      if ! cargo build 2>&1 > /dev/null; then
        WARNINGS+=("Debug build has issues")
        echo "‚ö†Ô∏è Debug build has issues"
      fi
    fi
    
    # Step 4: Run tests
    echo -e "\nüß™ Running tests..."
    
    output=$(cargo test --all 2>&1)
    exit_code=$?
    
    if [ $exit_code -ne 0 ]; then
      ERRORS+=("Tests failed")
      CHECK_FAILED=true
      echo "‚ùå Tests failed"
      
      # Extract test failures
      failures=$(echo "$output" | grep -E "test .* FAILED|failures:" | head -10)
      if [ -n "$failures" ]; then
        echo "Failed tests:"
        echo "$failures"
      fi
    else
      # Extract test summary
      test_result=$(echo "$output" | grep "test result:" | tail -1)
      if [ -n "$test_result" ]; then
        echo "‚úÖ $test_result"
      else
        echo "‚úÖ All tests passed"
      fi
    fi
    
    # Step 5: Check documentation
    echo -e "\nüìö Checking documentation..."
    
    # Build docs and check for warnings
    output=$(cargo doc --no-deps 2>&1)
    exit_code=$?
    
    if [ $exit_code -ne 0 ]; then
      ERRORS+=("Documentation build failed")
      CHECK_FAILED=true
      echo "‚ùå Documentation build failed"
    else
      # Check for doc warnings
      doc_warnings=$(echo "$output" | grep -c "warning:")
      if [ "$doc_warnings" -gt 0 ]; then
        WARNINGS+=("Documentation has $doc_warnings warnings")
        echo "‚ö†Ô∏è Documentation has $doc_warnings warnings"
      else
        echo "‚úÖ Documentation build passed"
      fi
    fi
    
    # Step 6: Security audit
    echo -e "\nüîí Running security audit..."
    
    # Check if cargo-audit is installed
    if ! cargo audit --version &> /dev/null; then
      echo "Installing cargo-audit..."
      cargo install cargo-audit 2>/dev/null || {
        WARNINGS+=("cargo-audit not available. Install with: cargo install cargo-audit")
        echo "‚ö†Ô∏è Skipping security audit"
      }
    fi
    
    if cargo audit --version &> /dev/null; then
      output=$(cargo audit 2>&1)
      exit_code=$?
      
      if [ $exit_code -ne 0 ]; then
        if echo "$output" | grep -q "vulnerabilities found"; then
          vuln_count=$(echo "$output" | grep -oP '\d+(?= vulnerabilities found)')
          ERRORS+=("Security audit found $vuln_count vulnerabilities")
          CHECK_FAILED=true
          echo "‚ùå Security audit found $vuln_count vulnerabilities"
        else
          echo "‚ùå Security audit failed"
          ERRORS+=("Security audit failed")
          CHECK_FAILED=true
        fi
      else
        echo "‚úÖ Security audit passed"
      fi
    fi
    
    # Step 7: Check examples (if any)
    echo -e "\nüìù Checking examples..."
    
    if [ -d "examples" ]; then
      example_count=$(find examples -name "*.rs" | wc -l)
      if [ "$example_count" -gt 0 ]; then
        if cargo build --examples 2>&1 > /dev/null; then
          echo "‚úÖ All $example_count examples build successfully"
        else
          WARNINGS+=("Some examples failed to build")
          echo "‚ö†Ô∏è Some examples failed to build"
        fi
      fi
    else
      echo "‚ÑπÔ∏è No examples found"
    fi
    
    # Output results
    echo -e "\nüìä Rust Quality Check Summary:"
    echo "=============================="
    
    if [ $CHECK_FAILED = true ]; then
      echo "‚ùå Quality checks FAILED"
      
      if [ ${#ERRORS[@]} -gt 0 ]; then
        echo -e "\nüö´ Errors (must fix):"
        printf '%s\n' "${ERRORS[@]}"
      fi
    else
      echo "‚úÖ All quality checks PASSED"
    fi
    
    if [ ${#WARNINGS[@]} -gt 0 ]; then
      echo -e "\n‚ö†Ô∏è Warnings (should fix):"
      printf '%s\n' "${WARNINGS[@]}"
    fi
    
    if [ $CHECK_FAILED = true ]; then
      exit 1
    else
      exit 0
    fi

analysis:
  script: |
    #!/bin/bash
    echo "üîç Analyzing Rust project quality issues..."
    
    echo -e "\nüìã Recommended Actions:"
    echo "======================="
    
    # Format recommendations
    echo -e "\nüé® Code Formatting:"
    echo "  - Auto-fix: cargo fmt"
    echo "  - Check only: cargo fmt -- --check"
    echo "  - Configure: create rustfmt.toml"
    
    # Clippy recommendations
    echo -e "\nüìé Clippy Linting:"
    echo "  - Fix warnings: cargo clippy --fix"
    echo "  - Strict mode: cargo clippy -- -W clippy::all -W clippy::pedantic"
    echo "  - Allow specific: #[allow(clippy::lint_name)]"
    
    # Build recommendations
    echo -e "\nüî® Build Optimization:"
    echo "  - Release build: cargo build --release"
    echo "  - Check only: cargo check"
    echo "  - Clean build: cargo clean && cargo build"
    echo "  - Profile-guided: cargo build --profile=release-lto"
    
    # Test recommendations
    echo -e "\nüß™ Testing:"
    echo "  - Run all: cargo test"
    echo "  - With output: cargo test -- --nocapture"
    echo "  - Specific test: cargo test test_name"
    echo "  - Coverage: cargo tarpaulin"
    echo "  - Benchmarks: cargo bench"
    
    # Performance recommendations
    echo -e "\n‚ö° Performance:"
    echo "  - Enable LTO: lto = true in Cargo.toml"
    echo "  - Optimize size: opt-level = 'z'"
    echo "  - CPU specific: target-cpu=native"
    echo "  - Profile: cargo flamegraph"
    
    # Security recommendations
    echo -e "\nüîí Security:"
    echo "  - Audit: cargo audit fix"
    echo "  - Update deps: cargo update"
    echo "  - Check outdated: cargo outdated"
    echo "  - Deny lists: cargo deny check"
    
    # Documentation
    echo -e "\nüìö Documentation:"
    echo "  - Generate: cargo doc --open"
    echo "  - Test examples: cargo test --doc"
    echo "  - Lint docs: #![warn(missing_docs)]"
    echo "  - Publish docs: cargo doc --no-deps"

fix:
  script: |
    #!/bin/bash
    echo "üîß Fixing Rust code quality issues..."
    
    # Fix formatting
    echo -e "\nüé® Fixing code formatting..."
    cargo fmt
    echo "‚úÖ Code formatting fixed"
    
    # Fix clippy warnings
    echo -e "\nüìé Fixing clippy warnings..."
    if cargo clippy --version &> /dev/null; then
      cargo clippy --fix --allow-dirty --allow-staged 2>/dev/null || echo "‚ö†Ô∏è Some clippy fixes require manual intervention"
      echo "‚úÖ Applied automatic clippy fixes"
    fi
    
    # Update dependencies
    echo -e "\nüì¶ Updating dependencies..."
    cargo update
    echo "‚úÖ Dependencies updated"
    
    # Fix security vulnerabilities
    echo -e "\nüîí Fixing security issues..."
    if cargo audit --version &> /dev/null; then
      cargo audit fix 2>/dev/null || echo "‚ö†Ô∏è Some vulnerabilities require manual updates"
    fi
    
    # Clean and rebuild
    echo -e "\nüî® Cleaning and rebuilding..."
    cargo clean
    cargo build
    echo "‚úÖ Project rebuilt"
    
    # Generate documentation
    echo -e "\nüìö Generating documentation..."
    cargo doc --no-deps
    echo "‚úÖ Documentation generated"
    
    echo -e "\n‚úÖ Rust quality fixes applied!"
    echo "Please run 'cargo test' to ensure all tests still pass."

config:
  requiredFiles:
    - pattern: "**/Cargo.toml"
      description: "Rust project manifest"
  forbiddenPatterns:
    - pattern: "target/"
      description: "Build output directory"
  hooks:
    preCommit: |
      # Run quality checks before commit
      cargo fmt -- --check
      cargo clippy -- -D warnings
      cargo test
      cargo doc --no-deps