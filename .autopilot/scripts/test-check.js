#!/usr/bin/env node
/**
 * Test Check
 * Runs all tests and ensures they pass
 * Auto-generated by Claude Autopilot
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

async function check() {
    const errors = [];
    const warnings = [];
    
    try {
        // Detect project type and run appropriate test command
        const projectRoot = process.cwd();
        let testsExecuted = false;
        
        // Node.js / JavaScript / TypeScript
        const packageJsonPath = path.join(projectRoot, 'package.json');
        if (fs.existsSync(packageJsonPath)) {
            try {
                const pkg = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                
                // Check for test script
                if (pkg.scripts && pkg.scripts.test) {
                    try {
                        console.error('Running npm test...');
                        const output = execSync('npm test', { 
                            encoding: 'utf8',
                            env: { ...process.env, CI: 'true' } // Force non-interactive mode
                        });
                        
                        // Check if it's the default npm test script
                        if (output.includes('Error: no test specified')) {
                            warnings.push('No actual tests configured (using default npm test script)');
                        } else {
                            testsExecuted = true;
                        }
                    } catch (error) {
                        const errorOutput = error.stdout || error.stderr || error.message;
                        
                        // Check if it's just "no tests" error
                        if (errorOutput.includes('no test specified') || 
                            errorOutput.includes('No tests found')) {
                            warnings.push('No tests found in the project');
                        } else {
                            errors.push(`Tests failed: ${errorOutput}`);
                        }
                        testsExecuted = true;
                    }
                } else {
                    // Look for test frameworks
                    const hasJest = pkg.devDependencies?.jest || pkg.dependencies?.jest;
                    const hasMocha = pkg.devDependencies?.mocha || pkg.dependencies?.mocha;
                    const hasVitest = pkg.devDependencies?.vitest || pkg.dependencies?.vitest;
                    
                    if (hasJest) {
                        try {
                            console.error('Running Jest tests...');
                            execSync('npx jest --passWithNoTests', { 
                                encoding: 'utf8',
                                env: { ...process.env, CI: 'true' }
                            });
                            testsExecuted = true;
                        } catch (error) {
                            errors.push(`Jest tests failed: ${error.message}`);
                            testsExecuted = true;
                        }
                    } else if (hasMocha) {
                        try {
                            console.error('Running Mocha tests...');
                            execSync('npx mocha', { encoding: 'utf8' });
                            testsExecuted = true;
                        } catch (error) {
                            if (error.message.includes('No test files found')) {
                                warnings.push('No test files found for Mocha');
                            } else {
                                errors.push(`Mocha tests failed: ${error.message}`);
                            }
                            testsExecuted = true;
                        }
                    } else if (hasVitest) {
                        try {
                            console.error('Running Vitest tests...');
                            execSync('npx vitest run', { encoding: 'utf8' });
                            testsExecuted = true;
                        } catch (error) {
                            errors.push(`Vitest tests failed: ${error.message}`);
                            testsExecuted = true;
                        }
                    } else {
                        warnings.push('No test script or test framework found in package.json');
                    }
                }
            } catch (error) {
                warnings.push(`Could not parse package.json: ${error.message}`);
            }
        }
        
        // Go
        if (!testsExecuted && fs.existsSync(path.join(projectRoot, 'go.mod'))) {
            try {
                console.error('Running go test...');
                const output = execSync('go test ./...', { encoding: 'utf8' });
                
                if (output.includes('no test files')) {
                    warnings.push('No test files found in Go project');
                } else {
                    testsExecuted = true;
                }
            } catch (error) {
                const errorOutput = error.stdout || error.stderr || error.message;
                if (errorOutput.includes('no test files')) {
                    warnings.push('No test files found in Go project');
                } else {
                    errors.push(`Go tests failed: ${errorOutput}`);
                }
                testsExecuted = true;
            }
        }
        
        // Rust
        if (!testsExecuted && fs.existsSync(path.join(projectRoot, 'Cargo.toml'))) {
            try {
                console.error('Running cargo test...');
                execSync('cargo test', { encoding: 'utf8' });
                testsExecuted = true;
            } catch (error) {
                errors.push(`Cargo tests failed: ${error.message}`);
                testsExecuted = true;
            }
        }
        
        // C# / .NET
        const csprojFiles = fs.readdirSync(projectRoot).filter(f => f.endsWith('.csproj') || f.endsWith('.fsproj'));
        if (!testsExecuted && csprojFiles.length > 0) {
            try {
                console.error('Running dotnet test...');
                const output = execSync('dotnet test', { encoding: 'utf8' });
                
                if (output.includes('No test is available')) {
                    warnings.push('No tests found in .NET project');
                } else {
                    testsExecuted = true;
                }
            } catch (error) {
                errors.push(`Dotnet tests failed: ${error.message}`);
                testsExecuted = true;
            }
        }
        
        // Java - Maven
        if (!testsExecuted && fs.existsSync(path.join(projectRoot, 'pom.xml'))) {
            try {
                console.error('Running maven test...');
                execSync('mvn test', { encoding: 'utf8' });
                testsExecuted = true;
            } catch (error) {
                const errorOutput = error.stdout || error.stderr || error.message;
                if (errorOutput.includes('No tests to run')) {
                    warnings.push('No tests found in Maven project');
                } else {
                    errors.push(`Maven tests failed: ${errorOutput}`);
                }
                testsExecuted = true;
            }
        }
        
        // Java - Gradle
        if (!testsExecuted && (fs.existsSync(path.join(projectRoot, 'build.gradle')) || 
                               fs.existsSync(path.join(projectRoot, 'build.gradle.kts')))) {
            try {
                console.error('Running gradle test...');
                const gradleWrapper = fs.existsSync(path.join(projectRoot, 'gradlew')) ? './gradlew' : 'gradle';
                execSync(`${gradleWrapper} test`, { encoding: 'utf8' });
                testsExecuted = true;
            } catch (error) {
                errors.push(`Gradle tests failed: ${error.message}`);
                testsExecuted = true;
            }
        }
        
        // Python - pytest
        if (!testsExecuted && fs.existsSync(path.join(projectRoot, 'setup.py')) || 
            fs.existsSync(path.join(projectRoot, 'pyproject.toml')) ||
            fs.existsSync(path.join(projectRoot, 'requirements.txt'))) {
            
            // Check for test directories
            const testDirs = ['tests', 'test', 'tests.py', 'test.py'];
            const hasTests = testDirs.some(dir => fs.existsSync(path.join(projectRoot, dir)));
            
            if (hasTests) {
                try {
                    console.error('Running pytest...');
                    execSync('python -m pytest', { encoding: 'utf8' });
                    testsExecuted = true;
                } catch (error) {
                    // Try with pytest directly
                    try {
                        execSync('pytest', { encoding: 'utf8' });
                        testsExecuted = true;
                    } catch (error2) {
                        // Try unittest
                        try {
                            console.error('Running unittest...');
                            execSync('python -m unittest discover', { encoding: 'utf8' });
                            testsExecuted = true;
                        } catch (error3) {
                            warnings.push('Python project found but no test runner available (pytest/unittest)');
                        }
                    }
                }
            } else {
                warnings.push('Python project found but no test directory detected');
            }
        }
        
        // Ruby - RSpec/Minitest
        if (!testsExecuted && (fs.existsSync(path.join(projectRoot, 'Gemfile')) || 
                               fs.existsSync(path.join(projectRoot, '.ruby-version')))) {
            const hasSpec = fs.existsSync(path.join(projectRoot, 'spec'));
            const hasTest = fs.existsSync(path.join(projectRoot, 'test'));
            
            if (hasSpec) {
                try {
                    console.error('Running rspec...');
                    execSync('bundle exec rspec', { encoding: 'utf8' });
                    testsExecuted = true;
                } catch (error) {
                    errors.push(`RSpec tests failed: ${error.message}`);
                    testsExecuted = true;
                }
            } else if (hasTest) {
                try {
                    console.error('Running rake test...');
                    execSync('bundle exec rake test', { encoding: 'utf8' });
                    testsExecuted = true;
                } catch (error) {
                    warnings.push('Ruby test directory found but tests failed to run');
                }
            } else {
                warnings.push('Ruby project found but no test directory detected');
            }
        }
        
        if (!testsExecuted) {
            warnings.push('No recognized test framework found. Supported: npm test, jest, mocha, vitest, go test, cargo test, dotnet test, maven test, gradle test, pytest, unittest, rspec, rake test');
        }
        
        // Check for test files even if no runner was found
        if (!testsExecuted) {
            const testPatterns = ['*.test.js', '*.spec.js', '*.test.ts', '*.spec.ts', '*_test.go', '*_test.py', 'test_*.py', '*Test.java', '*Tests.cs'];
            let hasTestFiles = false;
            
            function findTestFiles(dir) {
                try {
                    const files = fs.readdirSync(dir);
                    for (const file of files) {
                        const filePath = path.join(dir, file);
                        const stat = fs.statSync(filePath);
                        
                        if (stat.isDirectory() && !file.startsWith('.') && !['node_modules', 'vendor', 'target', 'build', 'dist'].includes(file)) {
                            findTestFiles(filePath);
                        } else if (stat.isFile()) {
                            for (const pattern of testPatterns) {
                                const regex = new RegExp(pattern.replace('*', '.*'));
                                if (regex.test(file)) {
                                    hasTestFiles = true;
                                    return;
                                }
                            }
                        }
                    }
                } catch (error) {
                    // Ignore permission errors
                }
            }
            
            findTestFiles(projectRoot);
            
            if (hasTestFiles) {
                warnings.push('Test files found but no test runner configured');
            }
        }
        
        return {
            passed: errors.length === 0,
            errors,
            warnings
        };
    } catch (error) {
        return {
            passed: false,
            errors: [`Script execution failed: ${error.message}`],
            warnings
        };
    }
}

// Run the check and output results
check().then(result => {
    console.log(JSON.stringify(result, null, 2));
    process.exit(result.passed ? 0 : 1);
}).catch(error => {
    console.error(JSON.stringify({
        passed: false,
        errors: [`Unexpected error: ${error.message}`]
    }, null, 2));
    process.exit(1);
});