name: Build and Release

on:
  push:
    branches:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.0.3)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install
        npm install -g @vscode/vsce
        
    - name: Extract version
      id: extract_version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Extract version from branch name (e.g., v0.0.3 -> 0.0.3)
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed 's/^v//')
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Validate version in package.json
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        if [[ "$PACKAGE_VERSION" != "${{ steps.extract_version.outputs.VERSION }}" ]]; then
          echo "Error: package.json version ($PACKAGE_VERSION) doesn't match expected version (${{ steps.extract_version.outputs.VERSION }})"
          exit 1
        fi
        
    - name: Build extension
      run: |
        npm run compile
        
    - name: Package extension
      run: |
        vsce package --no-dependencies
        
    - name: Get package filename
      id: get_filename
      run: |
        FILENAME=$(ls *.vsix | head -1)
        echo "FILENAME=$FILENAME" >> $GITHUB_OUTPUT
        echo "Package: $FILENAME"
        
    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "v${{ steps.extract_version.outputs.VERSION }}" >/dev/null 2>&1; then
          echo "TAG_EXISTS=true" >> $GITHUB_OUTPUT
        else
          echo "TAG_EXISTS=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create or Get Release
      id: create_release
      uses: actions/create-release@v1
      if: steps.check_tag.outputs.TAG_EXISTS == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.extract_version.outputs.VERSION }}
        release_name: Release v${{ steps.extract_version.outputs.VERSION }}
        body: |
          ## Claude Autopilot v${{ steps.extract_version.outputs.VERSION }}
          
          ### Installation
          
          1. Download the `.vsix` file from the assets below
          2. Open VS Code
          3. Go to Extensions view (Ctrl+Shift+X)
          4. Click on the "..." menu and select "Install from VSIX..."
          5. Select the downloaded file
          
          ### What's New
          
          See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ### Features
          
          - üöÄ 24/7 Automated Processing
          - üîç Script Runner & Quality Checks
          - üîÑ Message Loop for Individual Tasks
          - üìä Rich User Interface
          
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ steps.get_filename.outputs.FILENAME }}
        asset_name: ${{ steps.get_filename.outputs.FILENAME }}
        asset_content_type: application/zip
        
    - name: Create release branch protection
      if: github.event_name == 'push'
      run: |
        echo "Release created successfully!"
        echo "Download URL: https://github.com/${{ github.repository }}/releases/download/v${{ steps.extract_version.outputs.VERSION }}/${{ steps.get_filename.outputs.FILENAME }}"