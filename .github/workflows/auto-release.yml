name: Automated Release on Branch

on:
  push:
    branches:
      - 'release/v*'
      - 'release-v*'

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      release_notes_file: ${{ steps.find_release_notes.outputs.file }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Extract version from branch name
      id: extract_version
      run: |
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        # Extract version from branch name (release/v1.2.3 or release-v1.2.3)
        VERSION=$(echo "$BRANCH_NAME" | sed -E 's/release[/-]v?([0-9]+\.[0-9]+\.[0-9]+)/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Detected version: $VERSION"
        
    - name: Find release notes file
      id: find_release_notes
      run: |
        VERSION="${{ steps.extract_version.outputs.version }}"
        # Look for release notes in various formats
        POSSIBLE_FILES=(
          "GITHUB_RELEASE_v${VERSION}.md"
          "RELEASE_v${VERSION}.md"
          "RELEASE-v${VERSION}.md"
          "release-notes-v${VERSION}.md"
          "release-notes/${VERSION}.md"
          "releases/v${VERSION}.md"
        )
        
        RELEASE_FILE=""
        for file in "${POSSIBLE_FILES[@]}"; do
          if [ -f "$file" ]; then
            RELEASE_FILE="$file"
            break
          fi
        done
        
        if [ -z "$RELEASE_FILE" ]; then
          echo "Warning: No release notes file found for version $VERSION"
          echo "file=" >> $GITHUB_OUTPUT
        else
          echo "Found release notes: $RELEASE_FILE"
          echo "file=$RELEASE_FILE" >> $GITHUB_OUTPUT
        fi

  build-extension:
    needs: prepare-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Update package.json version
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        npm version $VERSION --no-git-tag-version --allow-same-version
        
    - name: Install dependencies
      run: |
        echo "Installing dependencies..."
        npm ci
        echo "Dependencies installed successfully"
        
    - name: Verify build files exist
      run: |
        echo "Checking required files..."
        ls -la src/index.ts
        ls -la src/extension.ts
        ls -la src/claude_pty_wrapper.py
        ls -la src/webview/
        ls -la esbuild.js
        echo "All required files present"
        
    - name: Build extension
      run: |
        echo "Building extension..."
        node esbuild.js --production
        echo "Build completed"
        
    - name: Verify build output
      run: |
        echo "Checking build output..."
        ls -la out/
        ls -la out/extension.js
        echo "Build output verified"
      
    - name: Package extension
      run: |
        echo "Packaging extension..."
        npx @vscode/vsce package --no-dependencies
        echo "Package created successfully"
        ls -la *.vsix
      
    - name: Upload extension artifact
      uses: actions/upload-artifact@v4
      with:
        name: vscode-extension
        path: '*.vsix'
        retention-days: 1

  publish-npm:
    needs: [prepare-release, build-extension]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
        
    - name: Update package.json version
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        npm version $VERSION --no-git-tag-version --allow-same-version
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for npm
      run: npm run compile:production
      
    - name: Publish to npm
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        echo "Publishing version $VERSION to npm..."
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Verify npm publish
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        echo "Verifying npm package autoclaude@$VERSION"
        sleep 10
        npm view autoclaude@$VERSION || echo "Package may take a few minutes to appear on npm"

  create-release:
    needs: [prepare-release, build-extension, publish-npm]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: List artifacts
      run: |
        echo "Downloaded artifacts:"
        ls -la
        find . -type f -name "*.vsix"
        
    - name: Prepare release notes
      id: prepare_notes
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        RELEASE_FILE="${{ needs.prepare-release.outputs.release_notes_file }}"
        
        if [ -n "$RELEASE_FILE" ] && [ -f "$RELEASE_FILE" ]; then
          echo "Using release notes from: $RELEASE_FILE"
          cat "$RELEASE_FILE" > release-notes.md
        else
          echo "Generating default release notes"
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          {
            echo "# AutoClaude v${VERSION}"
            echo ""
            echo "## 🎉 New Release"
            echo ""
            echo "This release was automatically generated from branch ${BRANCH_NAME}."
            echo ""
            echo "### 📦 Installation"
            echo ""
            echo "#### VS Code Extension"
            echo "1. Download the \`.vsix\` file from the assets below"
            echo "2. Open VS Code"
            echo "3. Go to Extensions view (Ctrl+Shift+X)"
            echo "4. Click on the \"...\" menu and select \"Install from VSIX...\""
            echo "5. Select the downloaded file"
            echo ""
            echo "### 🚀 Features"
            echo "- 24/7 Automated Processing"
            echo "- Script Runner & Quality Checks"
            echo "- Message Loop for Individual Tasks"
            echo "- Rich User Interface"
            echo ""
            echo "### 📝 Changelog"
            echo "See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes."
            echo ""
            echo "---"
            echo "*This release was automatically generated from the ${BRANCH_NAME} branch.*"
          } > release-notes.md
        fi
        
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        
        # Check if tag exists locally
        if git rev-parse "v$VERSION" >/dev/null 2>&1; then
          echo "Tag v$VERSION already exists locally"
        else
          echo "Creating local tag v$VERSION"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
        fi
        
        # Try to push tag, but don't fail if it already exists
        if git push origin "v$VERSION" 2>/dev/null; then
          echo "Successfully pushed tag v$VERSION"
        else
          echo "Tag v$VERSION already exists on remote or push failed, continuing..."
        fi
        
        # Find all built assets
        ASSETS=""
        
        # Add VS Code extension
        for file in vscode-extension/*.vsix; do
          if [ -f "$file" ]; then
            ASSETS="$ASSETS $file"
          fi
        done
        
        echo "Assets to upload: $ASSETS"
        
        # Delete existing release if it exists (to avoid upload issues)
        if gh release view "v$VERSION" >/dev/null 2>&1; then
          echo "Release v$VERSION already exists, deleting it first..."
          gh release delete "v$VERSION" --yes || echo "Could not delete release, continuing..."
        fi
        
        # Create new release
        echo "Creating release v$VERSION..."
        if [ -n "$ASSETS" ]; then
          echo "Creating release with assets: $ASSETS"
          gh release create "v$VERSION" \
            --title "AutoClaude v$VERSION" \
            --notes-file release-notes.md \
            --draft=false \
            --prerelease=false \
            $ASSETS
        else
          echo "No assets found, creating release without assets"
          gh release create "v$VERSION" \
            --title "AutoClaude v$VERSION" \
            --notes-file release-notes.md \
            --draft=false \
            --prerelease=false
        fi
        
    - name: Output release URL
      run: |
        VERSION="${{ needs.prepare-release.outputs.version }}"
        echo "🎉 Release created successfully!"
        echo "📦 GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
        echo "📦 npm Package: https://www.npmjs.com/package/autoclaude/v/$VERSION"
        echo ""
        echo "Install from npm: npm install autoclaude@$VERSION"
        echo "Install VS Code extension: Download from GitHub release"