# Task Instructions for AI-Powered Project Enhancement with Multi-Agent Coordination


## CRITICAL: Multi-Agent Coordination Protocol

### Before Starting ANY Work:

1. **Check the Agent Coordination System:**
   ```
   /coordination/
   ├── active_work_registry.json     # Central registry of all active work
   ├── completed_work_log.json       # Log of completed tasks
   ├── agent_locks/                  # Directory for individual agent locks
   │   └── {agent_id}_{timestamp}.lock
   └── planned_work_queue.json       # Queue of planned but not started work
   ```

2. **Claim Your Work BEFORE Planning:**
   - Generate a unique agent ID: `agent_{timestamp}_{random_4_chars}`
   - Check `active_work_registry.json` for conflicts
   - Create a lock file in `agent_locks/` with:
     ```json
     {
       "agent_id": "your_agent_id",
       "timestamp": "ISO_8601_timestamp",
       "planned_scope": {
         "files": ["list", "of", "files", "you", "plan", "to", "modify"],
         "features": ["features", "or", "best_practices", "to", "implement"],
         "estimated_duration": "minutes"
       },
       "status": "planning|implementing|testing|completed"
     }
     ```

3. **Conflict Resolution Protocol:**
   - If files/features you want to work on are already locked:
     - Check the timestamp - if older than 1 hour, consider it stale
     - Look for alternative, non-conflicting work
     - Add your plan to `planned_work_queue.json` for later
   - Never proceed if another agent has an active lock on your target files

### Work Registration Process:

```markdown
## Step 1: Pre-Work Check
1. Run this check sequence:
   - List all files in `/coordination/agent_locks/`
   - Parse `active_work_registry.json`
   - Identify any overlapping files or features
   - Check `completed_work_log.json` to avoid redoing work

## Step 2: Register Your Intent
1. Create your work plan in `/coordination/planned_work/{agent_id}_plan.md`
2. Update `active_work_registry.json`:
   ```json
   {
     "agent_id": {
       "start_time": "timestamp",
       "files_locked": ["file1.py", "file2.py"],
       "features_working_on": ["type_hints", "error_handling"],
       "plan_file": "path/to/plan.md",
       "expected_completion": "timestamp"
     }
   }
   ```

## Step 3: During Work
- Update your lock file status every 30 minutes
- If you need additional files, check and lock them first
- If you encounter conflicts, STOP and reassess

## Step 4: Work Completion
1. Update `completed_work_log.json` with:
   - Summary of changes
   - Files modified
   - Features implemented
   - Git commit hash
2. Remove your entry from `active_work_registry.json`
3. Delete your lock file from `agent_locks/`
```

## Phase 1: Initial Document Review

First, you need to **CAREFULLY review** the following best practices guides in the `best_practices_guides/` directory:
- `PYTHON_FASTAPI_BEST_PRACTICES.md`
- `POSTGRES17_AND_PYTHON_BEST_PRACTICES.md`

These guides contain critical implementation standards that every piece of code in this project must conform to. Take the time to understand not just the what, but the why behind each practice.

### Progress Tracking Setup:

**Check for existing progress tracking:**
- IF `PYTHON_BEST_PRACTICES_IMPLEMENTATION_PROGRESS.md` already exists:
  - Read it thoroughly to understand what has already been done
  - Update the existing document with your new progress
  - Respect and build upon the work of previous agents
- IF the file does NOT exist:
  - Create `PYTHON_BEST_PRACTICES_IMPLEMENTATION_PROGRESS.md`
  - Structure it to include:
    * List of each major best practice category being applied
    * Implementation status tracking (0%, 25%, 50%, 75%, 100%) for each practice
    * Specific notes about changes made and affected files
    * **ACCURATE** status reporting - be ACTUALLY accurate and not exaggerate or mislead about completion status
    * Include timestamps and agent IDs for accountability

## Phase 2: Implementation Guidelines

### NEW: Conflict-Aware Implementation:
- Before modifying ANY file, check if it's locked by another agent
- Work on approximately `{chunk_size}` improvements per batch - this keeps changes manageable and reviewable
- Choose improvements that don't conflict with active work
- If your preferred work is locked, select from `planned_work_queue.json`
- Since multiple agents are often running at the same time, make sure that you are keeping track of what you do yourself and that the same files aren't being changed in confusing ways by another agent at the same time!

### File Selection Strategy:
1. **Prioritize non-conflicting work:**
   - Query active locks before planning
   - Select files/features not currently being worked on
   - Consider working on different modules or subsystems

2. **Communication through commits:**
   - Use descriptive branch names: `agent_{id}/feature_{name}`
   - Commit messages must include: `[Agent: {id}] {description}`
   - Push frequently to avoid conflicts
   - When you're done with this batch of improvements, commit your progress to git with a detailed commit message explaining what best practices were implemented

### Critical Implementation Requirements:
- Use proper refactoring techniques to avoid breaking existing functionality
- Add type hints incrementally, ensuring they're accurate
- Update the progress document after each set of changes
- Consider the impact on tests and update them as needed
- Be honest about partial implementations - it's better to accurately report 25% completion than to claim 100% when work remains
- Maintain granular tracking of:
  - What has been completed
  - What remains to be done
- Focus on related best practices within each batch to maintain coherence

## Phase 3: Project Understanding and Context

### Required Research:

Before you can effectively contribute to this project, you need to develop a deep understanding of what we're building and why. This isn't just about code - it's about understanding the business context and how our technical decisions will impact real-world outcomes.

1. **Explore all project code files thoroughly** - don't just skim, really understand the architecture
2. **Read through examples and end-to-end testing scripts** - these often reveal the intended use cases better than documentation
3. **Review documentation in `/doc` directory** - understand both the technical and business documentation
4. **Understand the project's purpose and architecture** - how do all the pieces fit together?

Beyond simply ensuring that the project follows all best practices, you should carefully explore the project code files and read through the examples and end-to-end testing scripts to truly understand what we're building here.

### Current Project Focus Areas:

The project focuses on several key capabilities:

1. **Document Analysis and Processing:**
   - Automatically reviewing complex documents with LLMs to extract structured information
   - Creating canonical, comprehensive, well-structured taxonomies and classification systems
   - Building complex JSON structures that exhaustively capture:
     * Key business information
     * Technical details and relationships
   - Enabling structured data that makes it easy to:
     * Filter documents by specific criteria
     * Search for particular content
     * Sort by business parameters
     * Find similar documents based on historical patterns
     * Perform comparative analysis across document collections

2. **Data Integration and Analysis:**
   - Improving ability to analyze and understand complex data relationships
   - Monitoring and reviewing diverse data sources for insights
   - Analysis that helps improve key business metrics
   - Augmenting human analysts with AI-powered analytical tools

### Technical Capabilities to Leverage:

The system should leverage cutting-edge LLM capabilities enhanced by powerful tools via MCP (Model Context Protocol), including:
- Hybrid lexical/semantic search across internal documents (using Elastic V9 and Postgres)
- Automated data processing and analysis
- Ingestion, processing and analysis of:
  - Structured and unstructured documents
  - Technical reports
  - Regulatory filings
  - Financial data
  - Market information
  - Competitive intelligence

## Phase 4: Planning Requirements

**BEFORE making any changes:**

You should ALWAYS come up with a clear, detailed, and specific plan of action. This isn't bureaucracy - it's about ensuring that every line of code we write delivers real business value.

### NEW: Coordination-Aware Planning

1. **Check for conflicts FIRST:**
   ```markdown
   ## Conflict Check Results
   - Active agents working: [list agent IDs and their scopes]
   - Files I want to modify: [list files]
   - Conflict status: [NO CONFLICTS | CONFLICTS FOUND: details]
   - Alternative options if conflicts exist: [list alternatives]
   ```

2. **Create a detailed action plan:**
   - Save as GitHub-flavored markdown file in `/docs` folder
   - Name it descriptively: `{date}_{agent_id}_{feature}_plan.md`
   - Include:
     * Clear, specific actions to be taken
     * **Detailed rationale and justification** - explain not just what you plan to do, but why
     * **Explanation of how it advances project goals** - how does this improve the system's capabilities?
     * **Evidence it will function correctly** - what testing or validation supports your approach?
     * **Assessment of business value vs. technical debt** - why are you convinced that it will advance the project's goals and will actually function correctly without creating unnecessary complexity?

3. **Plan must address:**
   - **Integration:** Explain exactly how you propose to make the plan a reality; how will you organize and structure any new code so that it fits well and logically into the existing project code structure
   - **Non-duplication:** You have to CAREFULLY AND THOROUGHLY check all existing code in the project before even coming up with a plan to ensure that you aren't reinventing the wheel! CAREFULLY CHECK all existing code to avoid reinventing features
   - **Compliance:** Full conformance with both best practices guides - conforming in all respects to the detailed best practices guides listed above for both python-fastapi and postgres-python
   - **Concurrency:** Account for multiple agents working simultaneously - track your changes and avoid conflicts
   - **Coordination section:**
     * Files to be locked
     * Features to be claimed
     * Estimated work duration
     * Fallback plan if conflicts arise

4. **Implementation strategy must detail:**
   - Code organization and structure
   - Integration points with existing functionality
   - Testing approach
   - Documentation updates
   - Progress tracking methodology
   - How the solution scales with growing data and user base

### Work Segmentation Guidelines:

To minimize conflicts, segment work by:
1. **Module boundaries:** Work on separate modules/packages
2. **Feature types:** Different agents focus on different best practices
3. **File types:** Separate agents for tests, docs, core code
4. **Vertical slices:** Complete features in isolated areas

### Stale Lock Cleanup:
- If you find locks older than 2 hours:
  1. Document in `/coordination/stale_locks_found.log`
  2. Move stale lock to `/coordination/stale_locks/`
  3. Proceed with caution, checking git for recent changes

### Emergency Coordination:
If you detect critical conflicts or broken coordination:
1. Create `/coordination/ALERT_{issue}_{timestamp}.md`
2. Stop all work immediately
3. Document the issue clearly
4. Wait for resolution before proceeding

## Example Coordination Flow:
```bash
# 1. Agent starts
agent_id="agent_20250101_120000_a1b2"

# 2. Check for conflicts
cat /coordination/active_work_registry.json
ls /coordination/agent_locks/

# 3. No conflicts found, create lock
echo '{...}' > /coordination/agent_locks/${agent_id}.lock

# 4. Update registry
# ... update active_work_registry.json ...

# 5. Do work
# ... implement features ...

# 6. Complete work
# ... update completed_work_log.json ...
rm /coordination/agent_locks/${agent_id}.lock
```

## Remember: Quality and Business Value First

Every change you make should be evaluated through the lens of: "How does this improve the system's ability to deliver value to its users?" We're not just writing code - we're building tools that will have real-world impact. Keep that responsibility in mind with every line of code you write.

## CRITICALLY IMPORTANT: Functionality Testing

It's not enough to ensure that all mypy and ruff warnings/errors are fixed (although that's certainly very helpful). We ALSO need to always test that we didn't break basic functionality. A good way to check that is to go into the main project root in the shell and then try a simple command like the following:

```bash
# Example - adjust based on your project's CLI structure
project_cli chat "Who invented calculus?"
```

That should just work very quickly. If it doesn't and shows a bunch of errors, then either you or another agent has broken the system and it is absolutely critical that you do not move on to anything else until you get the system back working properly again (and document what you did to fix it; if all relevant files are currently checked out by another active agent, then you can return to your unrelated tasks so you can at least make SOME progress in the meantime.).
